[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "qiskit-aqt-provider"
version = "1.3.0"
description = "Qiskit provider for AQT backends"
readme = "README.md"
keywords=[
  "qiskit",
  "quantum",
  "sdk",
]
license = "Apache-2.0"
maintainers = [
    { name = "Alpine Quantum Technologies GmbH", email = "info@aqt.eu" },
]
authors = [
    { name = "Qiskit Development Team" },
    { name = "Alpine Quantum Technologies GmbH", email = "info@aqt.eu" },
]
requires-python = ">=3.9"
classifiers=[
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
]
dependencies = [
  "httpx<1,>=0.24",
  "platformdirs<4,>=3",
  "pydantic<3,>=2.5",
  "python-dotenv<2,>=1",
  "qiskit<2,>=0.46",
  "qiskit-aer<1,>=0.13.2",
  "tabulate<1,>=0.9",
  "tqdm<5,>=4",
  "typing-extensions<5,>=4",
]
[project.optional-dependencies]
development = [
  "autodoc-pydantic==2.0.1",
  "coverage==7.4.1",
  "datamodel-code-generator==0.25.4",
  "hypothesis==6.98.9",
  "interrogate==1.5",
  "ipykernel==6.29.2",
  "jupyter-sphinx==0.4",
  "mistletoe==1.3",
  "mypy==1.8",
  "poethepoet==0.18.1",
  "polyfactory==2.14.1",
  "pre-commit==3.6.2",
  "pylatexenc==2.10",
  "pyproject-fmt==1.7",
  "pytest==7.4.4",
  "pytest-httpx==0.30",
  "pytest-mock==3.12",
  "pytest-sugar==0.9.7",
  "qiskit[visualization]==1.0.1",
  "qiskit-experiments==0.6",
  "qiskit-sphinx-theme==1.16",
  "rich==13.7",
  "ruff==0.2.2",
  "sphinx==7.2.6",
  "tomlkit==0.12.3",
  "typer==0.7",
  "types-requests~=2.31",
  "types-setuptools~=65.7",
  "types-tabulate~=0.9",
  "types-tqdm~=4.66",
]
examples = [
  "qiskit-algorithms<1,>=0.2",
  "qiskit-optimization<1,>=0.6",
]
[project.urls]
Documentation = "https://qiskit-community.github.io/qiskit-aqt-provider"
Repository = "https://github.com/qiskit-community/qiskit-aqt-provider"
[project.entry-points.pytest11]
pytest_qiskit_aqt = "qiskit_aqt_provider.test.fixtures"
[project.entry-points."qiskit.transpiler.scheduling"]
aqt = "qiskit_aqt_provider.transpiler_plugin:AQTSchedulingPlugin"
[project.entry-points."qiskit.transpiler.translation"]
aqt = "qiskit_aqt_provider.transpiler_plugin:AQTTranslationPlugin"

[tool.hatch.build.targets.sdist]
packages = [
  "qiskit_aqt_provider",
  # FIXME: put examples and test(s) in qiskit_aqt_provider package
  "examples",
  "test",
]

[tool.hatch.build.targets.wheel]
packages = [
  "qiskit_aqt_provider",
]

[tool.ruff]
line-length = 100
target-version = 'py39'
extend-exclude = [
    "qiskit_aqt_provider/api_models_generated.py",  # generated code
]

[tool.ruff.lint]
select = [
    "ARG",  # flake8-unused-arguments
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    "COM",  # flake8-commas
    "D",  # pydocstyle
    "E",  # pycodestyle errors
    "ERA",  # eradicate
    "F",  # pyflakes
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "NPY",  # numpy
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specials
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TID",  # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]
ignore = [
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D104",  # missing docstring in public package
    "D107",  # missing docstring in __init__
    "D211",  # no-blank-line-before-class (incompatible with D203)
    "D213",  # multiline-summary-second-line (incompatible with D212)
    "S311",  # suspicious-non-cryptographic-random-usage
    "SIM117",  # multiple-with-statements
    #
    # ignore following rules since they are conflicting with the formatter
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
]

[tool.ruff.lint.per-file-ignores]
"examples/*.py" = [
    "T201",  # allow prints
]
"scripts/*.py" = [
    "T201",  # allow prints
]
"test/**/*.py" = [
    "S101",  # allow assertions
    "D205",  # allow multiline docstring summaries
    "PT011",  # allow pytest.raises without match=
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.coverage.run]
dynamic_context = "test_function"
relative_files = true

[tool.coverage.report]
fail_under = 99

[tool.pyright]
exclude = [
    "**/__pycache__",
    "**/.*",
    "docs/",
]

typeCheckingMode = "basic"
analyzeUnannotatedFunctions = false
reportShadowedImports = true
reportTypeCommentUsage = true
reportImportCycles = false
reportMissingImports = false
reportMissingTypeStubs = false
reportConstantRedefinition = true
reportUnnecessaryTypeIgnoreComment = false

reportDuplicateImport = "error"

pythonVersion = "3.9"
pythonPlatform = "Linux"

[tool.datamodel-codegen]
disable-timestamp = true
enable-faux-immutability = true
enum-field-as-literal = "one"
field-constraints = true
output-model-type = "pydantic_v2.BaseModel"
strict-nullable = true
target-python-version = '3.9'
use-annotated = true
use-double-quotes = true
use-field-description = true
use-schema-description = true
wrap-string-literal = true

[tool.interrogate]
ignore-module = true
ignore-nested-functions = true
exclude = ["qiskit_aqt_provider/api_models_generated.py"]
fail-under = 88

[tool.poe.tasks.test]
shell = """
set -eu
coverage run ${cov_opts} -m pytest --hypothesis-profile=ci
coverage report
"""

[[tool.poe.tasks.test.args]]
name = "cov_opts"
default = ""

[tool.poe.tasks.format]
shell = """
ruff format .
pyproject-fmt .
"""

[tool.poe.tasks.python_format_check]
shell = "ruff format --check ."

[tool.poe.tasks.pyproject_format_check]
shell = "pyproject-fmt --check ."

[tool.poe.tasks.typecheck]
shell = "mypy ."

[tool.poe.tasks.check_api_models]
shell = "./scripts/api_models.py check"

[tool.poe.tasks.ruff_check]
shell = "ruff check ."

[tool.poe.tasks.docstring_coverage]
shell = "interrogate -v qiskit_aqt_provider test"

[tool.poe.tasks]
lint = ["check_api_models", "docstring_coverage", "ruff_check"]
format_check = ["python_format_check", "pyproject_format_check"]
generate-models = "./scripts/api_models.py generate"
version_check = "./scripts/package_version.py --verbose check"
docs = "sphinx-build -j auto -b html -W docs docs/_build"
all = ["version_check", "format_check", "lint", "typecheck", "test", "docs"]
